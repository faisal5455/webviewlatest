name: Flutter Build and Release APK

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write

jobs:
  check_commit_message:
    runs-on: ubuntu-latest
    outputs:
      should_build: ${{ steps.check_message.outputs.should_build }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      - id: check_message
        run: |
          commit_message=$(git log -1 --pretty=%B)
          if [[ $commit_message == *"[build apk]"* ]]; then
            echo "should_build=true" >> $GITHUB_OUTPUT
          else
            echo "should_build=false" >> $GITHUB_OUTPUT
          fi

  build:
    needs: check_commit_message
    if: needs.check_commit_message.outputs.should_build == 'true'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-java@v3
      with:
        distribution: 'zulu'
        java-version: '17'
    - uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.24.1'
    # - name: Cache pub dependencies
    #   uses: actions/cache@v3
    #   with:
    #     path: ${{ env.PUB_CACHE }}
    #     key: ${{ runner.os }}-pub-${{ hashFiles('**/pubspec.lock') }}
    #     restore-keys: |
    #       ${{ runner.os }}-pub-
    # - name: Get dependencies
    #   run: flutter pub get
    # - name: Generate Launcher Icons
    #   run: flutter pub run flutter_launcher_icons
    # - name: Change Version
    #   run: dart tool/change_version.dart 4 3.0.0
    # - name: Ensure correct file permissions
    #   run: chmod -R 777 android/ ios/
    # - name: Change app package name
    #   run: |
    #     flutter pub global activate change_app_package_name
    #     flutter pub global run change_app_package_name:main com.app.newtestapp
    # - name: Commit and push if changed
    #   run: |
    #     git config --global user.email "github-actions@github.com"
    #     git config --global user.name "GitHub Actions"
    #     git add .
    #     git diff --quiet && git diff --staged --quiet || (git commit -m "Automated package name change to com.app.mynewapp" && git push)
    # - name: Generate Splash Screen
    #   run: flutter pub run flutter_native_splash:create
    # - name: Build APK
    #   run: flutter build apk --release
    # - uses: actions/upload-artifact@v3
    #   with:
    #     name: release-apk
    #     path: build/app/outputs/flutter-apk/app-release.apk
    # - name: Email APK
    #   uses: dawidd6/action-send-mail@v3
    #   with:
    #     server_address: smtp.hostinger.com
    #     server_port: 465
    #     username: ${{secrets.EMAIL_USER}}
    #     password: ${{secrets.EMAIL_PASS}}
    #     subject: New APK Build Available
    #     body: Please find the new APK build attached to this email.
    #     to: faisal5455@gmail.com
    #     from: GitHub Actions
    #     attachments: build/app/outputs/flutter-apk/app-release.apk
    - name: Create test file
      run: echo "This is a test file for Firebase Storage upload" > test_file.txt

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '14'

    - name: Install Firebase Admin SDK
      run: npm install firebase-admin

    - name: Create Firebase upload script
      run: |
        cat << EOF > upload_to_firebase.js
        const admin = require('firebase-admin');
        const fs = require('fs');

        const serviceAccount = JSON.parse(process.env.FIREBASE_SERVICE_ACCOUNT);

        admin.initializeApp({
          credential: admin.credential.cert(serviceAccount),
          storageBucket: `${serviceAccount.project_id}.appspot.com`
        });

        const bucket = admin.storage().bucket();

        async function uploadFile() {
          try {
            await bucket.upload('test_file.txt', {
              destination: 'test_file.txt',
              metadata: {
                contentType: 'text/plain',
              },
            });
            console.log('File uploaded successfully.');

            const [url] = await bucket.file('test_file.txt').getSignedUrl({
              action: 'read',
              expires: '03-17-2025'
            });

            console.log('Download URL:', url);
            fs.writeFileSync('download_url.txt', url);
          } catch (error) {
            console.error('Error:', error);
            process.exit(1);
          }
        }

        uploadFile();
        EOF

    - name: Upload to Firebase and Get URL
      env:
        FIREBASE_SERVICE_ACCOUNT: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_KEY }}
      run: node upload_to_firebase.js

    - name: Read download URL
      id: get_url
      run: echo "::set-output name=url::$(cat download_url.txt)"